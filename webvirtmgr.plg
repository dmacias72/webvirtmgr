<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name      "webvirtmgr">
<!ENTITY author    "dmacias72">
<!ENTITY version   "2014.09.30">
<!ENTITY category  "VM Support">
<!ENTITY pluginURL "https://raw.githubusercontent.com/dmacias72/&name;/master/&name;.plg">
<!ENTITY pkgURL	   "https://raw.githubusercontent.com/&author;/unRAID_6.0/master/">
<!ENTITY pkgs 	   "/boot/packages/">
<!ENTITY plugin	   "/boot/config/plugins/&name;">
<!ENTITY emhttp	   "/usr/local/emhttp/plugins/&name;">
]>

<PLUGIN  name="&name;"
         author="&author;"
         version="&version;"
         category="&category;"
         pluginURL="&pluginURL;"
	 pkgURL="&pkgURL;"
	 pkgs="&pkgs;"
	 plugin="&plugin;"
	 emhttp="&emhttp;">
>
<!--
This Plugin installs webvirtmgr unRaid 6.0 ONLY. All dependencies are installed as needed and everything is controlable from the webgui.

Credits:
Troy Wagner: Heavily updated this plugin originally created / modified by Tim Alexander.
	This now contains more options and some validity to information added as to not break the app with invalid options.
	When invalid options are found, default values are loaded in its place.
	Spaces will be replaced with _ as passing anythign with a space breaks these plugins.
	Empty values which also break plugins, are replaced with default values also.
Infuencer
Benni-Chan: Much of the plug-in structure from his original plug-ins. Much of that code is still in place.
Anatoliy Guskov aka retspen: for creating webvirtmgr https://github.com/retspen/webvirtmgr
Rafi Khardalian: adding local socket support to webvirtmgr and help
Peter: compiling libvirt packages, help and testing
-->

<FILE Name="&pkgs;libvirt-python-1.2.8-x86_64-1_SBo.tgz" Run="upgradepkg --install-new">
<URL>&pkgURL;libvirt-python-1.2.8-x86_64-1_SBo.tgz</URL>
<MD5>df99c2de6e6c1df73ab740878922bfbe</MD5>
</FILE>

<FILE Name="&pkgs;tcl-8.6.1-x86_64-1.txz" Run="upgradepkg --install-new">
<URL>&pkgURL;tcl-8.6.1-x86_64-1.txz</URL>
<MD5>81a2ee6b801ff63a0b96ac8239fc9f26</MD5>
</FILE>

<FILE Name="&pkgs;expect-5.44.1.15-x86_64-2.txz" Run="upgradepkg --install-new">
<URL>&pkgURL;expect-5.44.1.15-x86_64-2.txz</URL>
<MD5>ba1415d7928ade48de4d17c74d65a7a1</MD5>
</FILE>

<FILE Name="&pkgs;webvirtmgr-site-packages-x86-64-1.txz" Run="upgradepkg --install-new">
<URL>&pkgURL;webvirtmgr-site-packages-x86-64-1.txz</URL>
<MD5>7de46f65b5b0065b49d3b19fa00ab5e0</MD5>
</FILE>

<FILE Name="&pkgs;pysetuptools-3.6-x86_64-1ponce.txz" Run="upgradepkg --install-new">
<URL>&pkgURL;pysetuptools-3.6-x86_64-1ponce.txz</URL>
<MD5>8ff5271f08e258ce46e8e96bebec66aa</MD5>
</FILE>

<FILE Name="&pkgs;git-1.8.4-x86_64-1.txz" Run="upgradepkg --install-new">
<URL>&pkgURL;git-1.8.4-x86_64-1.txz</URL>
<MD5>e24d44ec30e7afc16c5509c4d9446140</MD5>
</FILE>

<!--
Install script.
-->
<FILE Name="/tmp/hp-chkconf" Run="/bin/bash">
<INLINE>
<![CDATA[
# This will check each entry in the config so nothing is missing, and if missing, sets to default
CFGFILE=/boot/config/plugins/webvirtmgr/webvirtmgr.cfg
[ ! `cat "$CFGFILE" | grep SERVICE` ] && echo "SERVICE=\"disable\"" >> "$CFGFILE"
[ ! `cat "$CFGFILE" | grep INSTALLDIR` ] && echo "INSTALLDIR=\"/usr/local/webvirtmgr\"" >> "$CFGFILE"
[ ! `cat "$CFGFILE" | grep ^PORT` ] && echo "PORT=\"8000\"" >> "$CFGFILE"
[ ! `cat "$CFGFILE" | grep RUNAS` ] && echo "RUNAS=\"nobody\"" >> "$CFGFILE"
[ ! `cat "$CFGFILE" | grep USERNAME` ] && echo "USERNAME=\"yes\"" >> "$CFGFILE"
[ ! `cat "$CFGFILE" | grep PASSWORD` ] && echo "PASSWORD=\"yes\"" >> "$CFGFILE"
[ ! `cat "$CFGFILE" | grep SHOWLOGIN` ] && echo "SHOWLOGIN=\"yes\"" >> "$CFGFILE"
rm /tmp/hp-chkconf
]]>
</INLINE>
</FILE>

<!--
The 'install' script.
-->
<FILE Run="/bin/bash">
<INLINE> 
if [ ! -d &emhttp; ]; then
	mkdir -p &emhttp;
fi
tar -zxf &plugin;/&name;-&version;.tar.gz --strip=1 -C &emhttp;/
find &plugin; -type f -iname "*.tar.gz" ! -iname "&name;-&version;.tar.gz" -delete
mv -f /usr/local/emhttp/plugins/&name;/rc.&name; /etc/rc.d/rc.&name;
chmod 0770 /etc/rc.d/rc.&name;
cp -nr /usr/local/emhttp/plugins/&name;/&name; /boot/config/plugins
</INLINE>
</FILE>

<!--
The 'remove' script.
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
/etc/rc.d/rc.&name; stop
rm -rf /usr/local/emhttp/plugins/&name;
rm -f /etc/rc.d/rc.&name;
</INLINE>
</FILE>

</PLUGIN>

